#include <LiquidCrystal.h> // Inclui a biblioteca LiquidCrystal
#include <DHT.h>           // Inclui a biblioteca do sensor DHT

// Inicializa a biblioteca LiquidCrystal com os pinos de interface
LiquidCrystal lcd(8, 9, 4, 5, 6, 7);

// Define o pino do sensor DHT e o tipo de sensor (DHT22)
#define DHTPIN 2
#define DHTTYPE DHT22 // Ou DHT11, se for o caso
DHT sensor(DHTPIN, DHTTYPE);

// Variáveis para armazenar as leituras do sensor
float hum;
float temp;

// Variável para a leitura analógica dos botões
unsigned int valorA0 = 0;

// Constante para o valor analógico esperado do botão UP
// Calibre este valor se o seu shield retornar algo diferente!
const int BTN_UP_VALUE = 131; // Valor aproximado para o botão CIMA

void setup() {
  Serial.begin(9600);
  Serial.println("Sensor DHT22 e Keypad Shield");
  sensor.begin(); // Inicia o sensor DHT

  lcd.begin(16, 2); // Define 16 colunas e 2 linhas para o LCD
  lcd.clear();      // Limpa o LCD

  // Mensagem inicial no LCD
  lcd.setCursor(0, 0);
  lcd.print("Pressione UP");
  lcd.setCursor(0, 1);
  lcd.print("para ver dados");
}

void loop() {
  valorA0 = analogRead(A0); // Lê o valor analógico do pino A0 (onde os botões estão conectados)

  // Verifica se o botão UP foi pressionado
  // Usamos uma pequena margem de erro (e.g., +/- 10) para a leitura analógica
  if (valorA0 > (BTN_UP_VALUE - 10) && valorA0 < (BTN_UP_VALUE + 10)) {
    // Tecla UP pressionada, agora lemos os dados do sensor
    hum = sensor.readHumidity();   // Lê a umidade
    temp = sensor.readTemperature(); // Lê a temperatura

    // Verifica se a leitura do sensor falhou
    if (isnan(hum) || isnan(temp)) {
      Serial.println(F("Falha na leitura do sensor DHT22!"));
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Erro sensor!");
      lcd.setCursor(0, 1);
      lcd.print("Tente Novamente");
    } else {
      // Leituras bem-sucedidas, exibe no LCD
      lcd.clear(); // Limpa o LCD antes de exibir os novos dados
      lcd.setCursor(0, 0);
      lcd.print("Temp: ");
      lcd.print(temp);
      lcd.print((char)223); // Caractere de grau para Celsius
      lcd.print("C");

      lcd.setCursor(0, 1);
      lcd.print("Umid: ");
      lcd.print(hum);
      lcd.print("%");

      // Opcional: Imprime no Monitor Serial para depuração
      Serial.print("Temp: ");
      Serial.print(temp);
      Serial.print("C / Umid: ");
      Serial.print(hum);
      Serial.println("%");
    }
    // Adiciona um atraso para evitar leituras múltiplas enquanto o botão está pressionado
    // e para dar tempo de ver os dados.
    delay(2000); // Exibe os dados por 2 segundos antes de talvez limpar ou voltar à mensagem inicial
    
    // Após 2 segundos, limpa o LCD e volta à mensagem inicial
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Pressione UP");
    lcd.setCursor(0, 1);
    lcd.print("para ver dados");

  } else if (valorA0 > 1000) { // Verifica se nenhum botão está pressionado (valor alto para A0)
    // Se nenhum botão estiver pressionado, e a mensagem inicial não estiver lá,
    // garantimos que ela apareça.
    // Isso evita piscar a tela caso outro botão seja pressionado brevemente.
    // Podemos melhorar isso com um "state machine" para displays mais complexos.
    // Por enquanto, vamos manter a mensagem inicial padrão.
    // Se a tela já mostra "Pressione UP", não faz nada.
    // Isso pode ser mais robusto com uma flag de estado.
  }
  
  delay(100); // Pequeno atraso no loop para estabilização
}
